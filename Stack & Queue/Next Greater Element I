The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.

SOLUTION:

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int [] result=new int[nums1.length];
        List<Integer> nums2List=Arrays.stream(nums2).boxed().collect(Collectors.toList());
        for(int i=0;i<nums1.length;i++){
            int startIndex=nums2List.indexOf(nums1[i]);
            if(startIndex<nums2List.size()-1){
                int count=0;
                for(int j=startIndex+1;j<nums2List.size();j++){
                    if(nums2List.get(j)>nums1[i]){
                        result[i]=nums2List.get(j);
                        count++;
                        break;
                    }
                }
                if(count==0)
                    result[i]=-1;
            }else{
                result[i]=-1;
            }
        }
        return result;
    }
}
 
