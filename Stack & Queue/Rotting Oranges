You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

SOLUTION:

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        # do a level order traversal .. 
        current=[]
        n=len(grid)
        m=len(grid[0])
        fresh=0
        rotten=0
        levels={} # keeps track of time (level in the BFS traversal) 
		# and the already visited oranges to avoid cycles
        
        # O(mn)
        for i in range(n):
            for j in range(m):
                if grid[i][j]==2:
                    current.append((i,j))
                    rotten+=1
                    levels[(i,j)]=0
                elif grid[i][j]==1:
                    fresh+=1
        
		# no fresh oranges to rot 
        if fresh==0: return 0
        
		# while we have rotten oranges left to visit
        while len(current)>0: # O(mn)
            nextlevel=[]
			
            # loop through each orange in the currently rotted lot 
            for i,j in current:
                lvl=levels[(i,j)]
				# check if its neighbours can be rotted
                for r,c in [(i+1,j),(i-1,j),(i,j+1),(i,j-1)]:
                    if not 0<=r<n or not 0<=c<m or grid[r][c]!=1 or (r,c) in levels:
                        continue
                    nextlevel.append((r,c))
                    levels[(r,c)]=lvl+1
            
            current=list(nextlevel)

        if len(levels)<rotten+fresh: return -1
        return max(levels.values())
