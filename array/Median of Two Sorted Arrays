Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000
 
 SOLUTION:
 
 class Solution {
   public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int t = nums1.length + nums2.length;
       
       if(t%2 != 0){
        int [] y = mergUntilIndx(nums1,nums2,t/2);
           return (y[t/2]);
       }else{
       int [] y = mergUntilIndx(nums1,nums2,t/2);
           return ((y[t/2 -1] + y[t/2])/2.0);  
           
       }
       
   }
   
   public int [] mergUntilIndx(int []n,int [] m,int indx){
       
       if(n.length == 0)
           return m;
       if(m.length == 0)
           return n;
       
       int i = 0;
       int j = 0;
       int [] x = new int [indx+1];
       for(int k=0; k<x.length; k++){
           if(i < n.length && j < m.length){
               if(n[i]<m[j]){
                   x[k] = n[i];
                   i++;
               }else{
                   x[k] = m[j];
                   j++;
               }
           }
           else if(i < n.length){
               x[k] = n[i];
               i++;
           }else if (j < m.length){
                  x[k] = m[j];
                   j++;
           }
       }
       return x;
   }

}
