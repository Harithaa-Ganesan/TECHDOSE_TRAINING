Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

SOLUTION:

lass Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
       List<List<Integer>>res=new ArrayList<>();
        Arrays.sort(nums);

        for(int i=0;i<nums.length;i++)
        {
            if(i==0||nums[i]!=nums[i-1]) {
                for (int j = i + 1; j < nums.length-1; j++) {

                    if(j==i+1||nums[j]!=nums[j-1])
                    {
                       
                        int m = target -nums[i]-nums[j];

                        
                        
                        int lft=j+1;
                        int rht= nums.length-1;

                        while(lft<rht)// 2 sum pairs
                        {
                            if(lft!=j+1&&nums[lft]==nums[lft-1])
                            {
                                lft++;

                                continue;
                            }

                            int t=nums[lft]+nums[rht];
                            if(t==m)
                            {
                                List<Integer>san=new ArrayList<>();
                                
                                san.add(nums[i]);
                                san.add(nums[j]);
                                san.add(nums[lft] );
                                san.add(nums[rht]);
                                res.add(san);
                                
                                lft++;
                                rht--;
                            }
                            else if(t>m)
                            {
                                rht--;

                            }
                            else{
                                lft++;
                            }
                        }



                    }



                }

            }
        }
        return res;

    }
        
    }
