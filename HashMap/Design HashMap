Design HashMap

Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]


solution:

class MyHashMap {

     static class Node{
        int key; int val; Node next;

        Node(){}
        Node(int key, int val) {
            this.key = key;
            this.val = val;
        }
    }

    static Node mp=new Node(-1,-1);
    static Node head=mp;
    
    public MyHashMap() {
        
        mp=new Node(-1, -1);
        head=mp;
    }
    
    public void put(int key, int value) {
        
        head=mp;
        
        while(head.next !=null && head.key!=key) head=head.next;
        
        if(head.next == null && head.key != key){
            Node new_Node = new Node(key, value);
            head.next=new_Node;
        }
        
        else head.val=value;
    }
    
    public int get(int key) {
        
        head=mp;
        
         while(head!=null){
            if(head.key == key){
                return head.val;
            }
            head=head.next;
        }
        return -1;
        
    }
    
    public void remove(int key) {
        
        head=mp;
        
        while(head.next != null){
            if(head.next.key == key ){
                Node tmp = head.next.next;
                head.next=tmp;
                break;
            }
            head=head.next;
        }
    }
}

